/*
 *  cool.cup
 *              Parser definition for the COOL language.
 *
 */

import java_cup.runtime.*;

/* Stuff enclosed in {: :} is copied verbatim to the class containing
all parser actions.  All the extra variables/functions you want to use
in the semantic actions should go here.  Don't remove or modify anything
that was there initially.  */

action code {: 

    int curr_lineno() {
	return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }
:} 

/************************************************************************/
/*                DONT CHANGE ANYTHING IN THIS SECTION                  */

parser code {:
    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno + 
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("More than 50 errors");
	   System.exit(1);
	}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }
:}

/* Declare the terminals; a few have types for associated lexemes.  The
token ERROR is never used in the parser; thus, it is a parse error when
the lexer returns it.  */

terminal CLASS, ELSE, FI, IF, IN, INHERITS, LET, LET_STMT, LOOP, POOL, THEN, WHILE;
terminal CASE, ESAC, OF, DARROW, NEW, ISVOID;
terminal ASSIGN, NOT, LE, ERROR;
terminal PLUS, DIV, MINUS, MULT, EQ, LT, DOT, NEG, COMMA, SEMI, COLON;
terminal LPAREN, RPAREN, AT, LBRACE, RBRACE;
terminal AbstractSymbol STR_CONST, INT_CONST;
terminal Boolean BOOL_CONST;
terminal AbstractSymbol TYPEID, OBJECTID;

/*  DON'T CHANGE ANYTHING ABOVE THIS LINE, OR YOUR PARSER WONT WORK       */
/**************************************************************************/

   /* Complete the nonterminal list below, giving a type for the semantic
      value of each non terminal. (See the CUP documentation for details. */

nonterminal programc program;
nonterminal Classes class_list;
nonterminal class_c class;
nonterminal Features dummy_feature_list;
nonterminal Features feature_list;
nonterminal Feature feature;
nonterminal Formals opt_formal_list;
nonterminal Formals formal_list;
nonterminal Formal formal;
nonterminal Expression expr;
nonterminal Expression binary_op;
nonterminal Expression simple_expr;
nonterminal Expression const_expr;
nonterminal Expressions dummy_expr_list;
nonterminal Expressions expr_list;
nonterminal Expressions block_expr_list;
nonterminal Case case_branch;
nonterminal Cases case_list;
nonterminal Expression init_expr;


/* Precedence declarations go here. */
precedence right  ASSIGN;
precedence nonassoc  NOT;
precedence nonassoc  EQ, LT, LE;
precedence left  PLUS, MINUS;
precedence left  MULT, DIV;
precedence nonassoc  ISVOID;
precedence nonassoc  NEG;
precedence nonassoc  AT;
precedence nonassoc  DOT;


program	
	::= class_list:cl
	    {: RESULT = new programc(curr_lineno(), cl); :}
        ;

class_list
	/* single class */
	::= class:c
	    {: RESULT = (new Classes(curr_lineno())).appendElement(c); :}
	/* several classes */
	| class_list:cl class:c
	    {: RESULT = cl.appendElement(c); :}
	;

/* If no parent is specified, the class inherits from the Object class */
class
	::= CLASS TYPEID:n LBRACE dummy_feature_list:f RBRACE SEMI
	    {: RESULT = new class_c(curr_lineno(), n, 
		                   AbstractTable.idtable.addString("Object"), 
				   f, curr_filename()); :}
	| CLASS TYPEID:n INHERITS TYPEID:p LBRACE dummy_feature_list:f RBRACE SEMI
	    {: RESULT = new class_c(curr_lineno(), n, p, f, curr_filename()); :}
	| error LBRACE dummy_feature_list RBRACE SEMI
	;

/* Feature list may be empty, but no empty features in list. */
dummy_feature_list
	::= /* empty */
	    {: RESULT = new Features(curr_lineno()); :}
	| feature_list
	;

feature_list
	/* single feature */
	::= feature:f
		{: RESULT = (new Features(curr_lineno())).appendElement(f); :}
	/* several features */
	| feature_list:fl feature:f
		{: RESULT = fl.appendElement(f); :}
	;

feature 
	::= OBJECTID:n LPAREN opt_formal_list:f RPAREN COLON TYPEID:rt LBRACE expr:e RBRACE SEMI
		{: RESULT = new method(curr_lineno(), n, f, rt, e); :}	
	| OBJECTID:n COLON TYPEID:td init_expr:i SEMI
		{: RESULT = new attr(curr_lineno(), n, td, i); :}
	| error LBRACE expr:e RBRACE SEMI
	| error SEMI
	;

opt_formal_list
	::= /* empty */
		{: RESULT = new Formals(curr_lineno()); :}
	| formal_list
	;

formal_list
	/* single formal */
	::= formal:f
		{: RESULT = (new Formals(curr_lineno())).appendElement(f); :}
	/* several formals */
	| formal_list:fl COMMA formal:f
		{: RESULT = fl.appendElement(f); :}
	;

formal
	::= OBJECTID:n COLON TYPEID:td
		{: RESULT = new formalc(curr_lineno(), n, td); :}
	;

init_expr
	::= /* empty */
		{: RESULT = new no_expr(curr_lineno()); :}
	| ASSIGN expr:e
		{: RESULT = e; :}
	;

expr
	::= OBJECTID:n ASSIGN expr:e
		{: RESULT = new assign(curr_lineno(), n, e); :}
	| expr:e AT TYPEID:tn DOT OBJECTID:n LPAREN dummy_expr_list:a RPAREN	
		{: RESULT = new static_dispatch(curr_lineno(), e, tn, n, a); :}
	| expr:e DOT OBJECTID:n LPAREN dummy_expr_list:a RPAREN
		{: RESULT = new dispatch(curr_lineno(), e, n, a); :}
	| OBJECTID:n LPAREN dummy_expr_list:a RPAREN
		{: RESULT = new dispatch(curr_lineno(), new no_expr(curr_lineno()), n, a); :}
	| IF expr:p THEN expr:te ELSE expr:ee FI
		{: RESULT = new cond(curr_lineno(), p, te, ee); :}
	| WHILE expr:p LOOP expr:b POOL
		{: RESULT = new loop(curr_lineno(), p, b); :}
	| LBRACE block_expr_list:b RBRACE
		{: new block(curr_lineno(), b); :}
	| LET OBJECTID:n COLON TYPEID:td init_expr:i IN expr:b
		{: RESULT = new let(curr_lineno(), n, td, i, b); :}
	| CASE expr:e OF case_list:cl ESAC
		{: RESULT = new typcase(curr_lineno(), e, cl); :}	
	| binary_op:b
		{: RESULT = b; :}
	| simple_expr:s
		{: RESULT = s; :}
	| const_expr:c
		{: RESULT = c; :}
	;

binary_op
	::= expr:e1 PLUS expr:e2
		{: RESULT = new plus(curr_lineno(), e1, e2);  :}
	| expr:e1 MINUS expr:e2
		{: RESULT = new sub(curr_lineno(), e1, e2);  :}
	| expr:e1 MULT expr:e2
		{: RESULT = new mul(curr_lineno(), e1, e2);  :}
	| expr:e1 DIV expr:e2
		{: RESULT = new divide(curr_lineno(), e1, e2);  :}
	| expr:e1 LT expr:e2
		{: RESULT = new lt(curr_lineno(), e1, e2);  :}
	| expr:e1 EQ expr:e2
		{: RESULT = new eq(curr_lineno(), e1, e2);  :}
	| expr:e1 LE expr:e2
		{: RESULT = new leq(curr_lineno(), e1, e2);  :}
	;

simple_expr
	::= NEW TYPEID:tn
		{: RESULT = new new_(curr_lineno(), tn); :}
	| ISVOID expr:e
		{: RESULT = new isvoid(curr_lineno(), e); :}
	| NEG expr:e
		{: RESULT = new neg(curr_lineno(), e); :}
	| NOT expr:e
		{: RESULT = new comp(curr_lineno(), e); :}
	| LPAREN expr:e RPAREN
		{: RESULT = e; :}
	| OBJECTID:n
		{: RESULT = new object(curr_lineno(), n); :}
	;

const_expr
	::= INT_CONST:t
		{: RESULT = new int_const(curr_lineno(), t); :} 
	| BOOL_CONST:v
		{: RESULT = new bool_const(curr_lineno(), v); :}
	| STR_CONST:t
		{: RESULT = new string_const(curr_lineno(), t); :}
	;

case_branch
	::= OBJECTID:n COLON TYPEID:td DARROW expr:e SEMI
		{: RESULT = new branch(curr_lineno(), n, td, e); :} 
	;

case_list
	::= case_branch:b
		{: RESULT = new Cases(curr_lineno()); :}
	| case_list:cl case_branch:b
		{: RESULT =  cl.appendElement(b); :}
	;

dummy_expr_list 
	::= /* empty */	
		{: RESULT = new Expressions(curr_lineno()); :}
	| expr_list
	;

expr_list
	::= expr:e
		{: RESULT = (new Expressions(curr_lineno())).appendElement(e); :}
	| expr_list:el COMMA expr:e
		{: RESULT = el.appendElement(e); :}
	;

block_expr_list
	::= expr:e SEMI
		{: RESULT = (new Expressions(curr_lineno())).appendElement(e); :}
	| block_expr_list:el expr:e SEMI
		{: RESULT = el.appendElement(e); :}
	;
